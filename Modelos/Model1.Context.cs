//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GenteFit.Modelos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GenteFitCristinaEntities1 : DbContext
    {
        public GenteFitCristinaEntities1()
            : base("name=GenteFitCristinaEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Actividad> Actividad { get; set; }
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<ListaEspera> ListaEspera { get; set; }
        public virtual DbSet<Monitor> Monitor { get; set; }
        public virtual DbSet<Reserva> Reserva { get; set; }
        public virtual DbSet<Sala> Sala { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
    
        public virtual int sp_DeleteActividad(Nullable<int> actividadID)
        {
            var actividadIDParameter = actividadID.HasValue ?
                new ObjectParameter("ActividadID", actividadID) :
                new ObjectParameter("ActividadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteActividad", actividadIDParameter);
        }
    
        public virtual int sp_DeleteCliente(Nullable<int> clienteID)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteCliente", clienteIDParameter);
        }
    
        public virtual int sp_DeleteListaEspera(Nullable<int> listaEsperaID)
        {
            var listaEsperaIDParameter = listaEsperaID.HasValue ?
                new ObjectParameter("ListaEsperaID", listaEsperaID) :
                new ObjectParameter("ListaEsperaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteListaEspera", listaEsperaIDParameter);
        }
    
        public virtual int sp_DeleteMonitor(Nullable<int> monitorID)
        {
            var monitorIDParameter = monitorID.HasValue ?
                new ObjectParameter("MonitorID", monitorID) :
                new ObjectParameter("MonitorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteMonitor", monitorIDParameter);
        }
    
        public virtual int sp_DeleteReserva(Nullable<int> reservaID)
        {
            var reservaIDParameter = reservaID.HasValue ?
                new ObjectParameter("ReservaID", reservaID) :
                new ObjectParameter("ReservaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteReserva", reservaIDParameter);
        }
    
        public virtual int sp_DeleteSala(Nullable<int> salaID)
        {
            var salaIDParameter = salaID.HasValue ?
                new ObjectParameter("SalaID", salaID) :
                new ObjectParameter("SalaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteSala", salaIDParameter);
        }
    
        public virtual int sp_DeleteUsuario(Nullable<int> usuarioID)
        {
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteUsuario", usuarioIDParameter);
        }
    
        public virtual ObjectResult<sp_GetActividades_Result> sp_GetActividades()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetActividades_Result>("sp_GetActividades");
        }
    
        public virtual ObjectResult<sp_GetClientes_Result> sp_GetClientes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetClientes_Result>("sp_GetClientes");
        }
    
        public virtual ObjectResult<sp_GetListaEsperaByActividad_Result> sp_GetListaEsperaByActividad(Nullable<int> actividadID)
        {
            var actividadIDParameter = actividadID.HasValue ?
                new ObjectParameter("ActividadID", actividadID) :
                new ObjectParameter("ActividadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetListaEsperaByActividad_Result>("sp_GetListaEsperaByActividad", actividadIDParameter);
        }
    
        public virtual ObjectResult<sp_GetMonitores_Result> sp_GetMonitores()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMonitores_Result>("sp_GetMonitores");
        }
    
        public virtual ObjectResult<sp_GetReservas_Result> sp_GetReservas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReservas_Result>("sp_GetReservas");
        }
    
        public virtual ObjectResult<sp_GetSalas_Result> sp_GetSalas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSalas_Result>("sp_GetSalas");
        }
    
        public virtual ObjectResult<sp_GetUsuarios_Result> sp_GetUsuarios()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUsuarios_Result>("sp_GetUsuarios");
        }
    
        public virtual int sp_InsertActividad(string nombre, string descripcion, string intensidad, Nullable<int> plazasTotales, Nullable<System.DateTime> horario, Nullable<int> salaID, Nullable<int> monitorID)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var intensidadParameter = intensidad != null ?
                new ObjectParameter("Intensidad", intensidad) :
                new ObjectParameter("Intensidad", typeof(string));
    
            var plazasTotalesParameter = plazasTotales.HasValue ?
                new ObjectParameter("PlazasTotales", plazasTotales) :
                new ObjectParameter("PlazasTotales", typeof(int));
    
            var horarioParameter = horario.HasValue ?
                new ObjectParameter("Horario", horario) :
                new ObjectParameter("Horario", typeof(System.DateTime));
    
            var salaIDParameter = salaID.HasValue ?
                new ObjectParameter("SalaID", salaID) :
                new ObjectParameter("SalaID", typeof(int));
    
            var monitorIDParameter = monitorID.HasValue ?
                new ObjectParameter("MonitorID", monitorID) :
                new ObjectParameter("MonitorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertActividad", nombreParameter, descripcionParameter, intensidadParameter, plazasTotalesParameter, horarioParameter, salaIDParameter, monitorIDParameter);
        }
    
        public virtual int sp_InsertCliente(string nombre, string apellidos, string correo, string telefono, Nullable<System.DateTime> fechaNacimiento, string direccion)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertCliente", nombreParameter, apellidosParameter, correoParameter, telefonoParameter, fechaNacimientoParameter, direccionParameter);
        }
    
        public virtual int sp_InsertListaEspera(Nullable<int> posicion, Nullable<int> clienteID, Nullable<int> actividadID)
        {
            var posicionParameter = posicion.HasValue ?
                new ObjectParameter("Posicion", posicion) :
                new ObjectParameter("Posicion", typeof(int));
    
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            var actividadIDParameter = actividadID.HasValue ?
                new ObjectParameter("ActividadID", actividadID) :
                new ObjectParameter("ActividadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertListaEspera", posicionParameter, clienteIDParameter, actividadIDParameter);
        }
    
        public virtual int sp_InsertMonitor(string nombre, string apellidos, string telefono, string correo, Nullable<int> usuarioID)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertMonitor", nombreParameter, apellidosParameter, telefonoParameter, correoParameter, usuarioIDParameter);
        }
    
        public virtual int sp_InsertReserva(Nullable<System.DateTime> fechaReserva, string estadoReserva, Nullable<int> clienteID, Nullable<int> actividadID)
        {
            var fechaReservaParameter = fechaReserva.HasValue ?
                new ObjectParameter("FechaReserva", fechaReserva) :
                new ObjectParameter("FechaReserva", typeof(System.DateTime));
    
            var estadoReservaParameter = estadoReserva != null ?
                new ObjectParameter("EstadoReserva", estadoReserva) :
                new ObjectParameter("EstadoReserva", typeof(string));
    
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            var actividadIDParameter = actividadID.HasValue ?
                new ObjectParameter("ActividadID", actividadID) :
                new ObjectParameter("ActividadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertReserva", fechaReservaParameter, estadoReservaParameter, clienteIDParameter, actividadIDParameter);
        }
    
        public virtual int sp_InsertSala(string nombre, Nullable<int> capacidad)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var capacidadParameter = capacidad.HasValue ?
                new ObjectParameter("Capacidad", capacidad) :
                new ObjectParameter("Capacidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertSala", nombreParameter, capacidadParameter);
        }
    
        public virtual int sp_InsertUsuario(string nombreUsuario, string contraseña, string rol)
        {
            var nombreUsuarioParameter = nombreUsuario != null ?
                new ObjectParameter("NombreUsuario", nombreUsuario) :
                new ObjectParameter("NombreUsuario", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var rolParameter = rol != null ?
                new ObjectParameter("Rol", rol) :
                new ObjectParameter("Rol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUsuario", nombreUsuarioParameter, contraseñaParameter, rolParameter);
        }
    
        public virtual int sp_UpdateActividad(Nullable<int> actividadID, string nombre, string descripcion, string intensidad, Nullable<int> plazasTotales, Nullable<System.DateTime> horario, Nullable<int> salaID, Nullable<int> monitorID)
        {
            var actividadIDParameter = actividadID.HasValue ?
                new ObjectParameter("ActividadID", actividadID) :
                new ObjectParameter("ActividadID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var intensidadParameter = intensidad != null ?
                new ObjectParameter("Intensidad", intensidad) :
                new ObjectParameter("Intensidad", typeof(string));
    
            var plazasTotalesParameter = plazasTotales.HasValue ?
                new ObjectParameter("PlazasTotales", plazasTotales) :
                new ObjectParameter("PlazasTotales", typeof(int));
    
            var horarioParameter = horario.HasValue ?
                new ObjectParameter("Horario", horario) :
                new ObjectParameter("Horario", typeof(System.DateTime));
    
            var salaIDParameter = salaID.HasValue ?
                new ObjectParameter("SalaID", salaID) :
                new ObjectParameter("SalaID", typeof(int));
    
            var monitorIDParameter = monitorID.HasValue ?
                new ObjectParameter("MonitorID", monitorID) :
                new ObjectParameter("MonitorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateActividad", actividadIDParameter, nombreParameter, descripcionParameter, intensidadParameter, plazasTotalesParameter, horarioParameter, salaIDParameter, monitorIDParameter);
        }
    
        public virtual int sp_UpdateCliente(Nullable<int> clienteID, string nombre, string apellidos, string correo, string telefono, Nullable<System.DateTime> fechaNacimiento, string direccion)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateCliente", clienteIDParameter, nombreParameter, apellidosParameter, correoParameter, telefonoParameter, fechaNacimientoParameter, direccionParameter);
        }
    
        public virtual int sp_UpdateListaEsperaPosicion(Nullable<int> listaEsperaID, Nullable<int> posicion)
        {
            var listaEsperaIDParameter = listaEsperaID.HasValue ?
                new ObjectParameter("ListaEsperaID", listaEsperaID) :
                new ObjectParameter("ListaEsperaID", typeof(int));
    
            var posicionParameter = posicion.HasValue ?
                new ObjectParameter("Posicion", posicion) :
                new ObjectParameter("Posicion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateListaEsperaPosicion", listaEsperaIDParameter, posicionParameter);
        }
    
        public virtual int sp_UpdateMonitor(Nullable<int> monitorID, string nombre, string apellidos, string telefono, string correo)
        {
            var monitorIDParameter = monitorID.HasValue ?
                new ObjectParameter("MonitorID", monitorID) :
                new ObjectParameter("MonitorID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateMonitor", monitorIDParameter, nombreParameter, apellidosParameter, telefonoParameter, correoParameter);
        }
    
        public virtual int sp_UpdateReserva(Nullable<int> reservaID, Nullable<System.DateTime> fechaReserva, string estadoReserva, Nullable<int> clienteID, Nullable<int> actividadID)
        {
            var reservaIDParameter = reservaID.HasValue ?
                new ObjectParameter("ReservaID", reservaID) :
                new ObjectParameter("ReservaID", typeof(int));
    
            var fechaReservaParameter = fechaReserva.HasValue ?
                new ObjectParameter("FechaReserva", fechaReserva) :
                new ObjectParameter("FechaReserva", typeof(System.DateTime));
    
            var estadoReservaParameter = estadoReserva != null ?
                new ObjectParameter("EstadoReserva", estadoReserva) :
                new ObjectParameter("EstadoReserva", typeof(string));
    
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            var actividadIDParameter = actividadID.HasValue ?
                new ObjectParameter("ActividadID", actividadID) :
                new ObjectParameter("ActividadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateReserva", reservaIDParameter, fechaReservaParameter, estadoReservaParameter, clienteIDParameter, actividadIDParameter);
        }
    
        public virtual int sp_UpdateSala(Nullable<int> salaID, string nombre, Nullable<int> capacidad)
        {
            var salaIDParameter = salaID.HasValue ?
                new ObjectParameter("SalaID", salaID) :
                new ObjectParameter("SalaID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var capacidadParameter = capacidad.HasValue ?
                new ObjectParameter("Capacidad", capacidad) :
                new ObjectParameter("Capacidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateSala", salaIDParameter, nombreParameter, capacidadParameter);
        }
    
        public virtual int sp_UpdateUsuario(Nullable<int> usuarioID, string nombreUsuario, string contraseña, string rol)
        {
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            var nombreUsuarioParameter = nombreUsuario != null ?
                new ObjectParameter("NombreUsuario", nombreUsuario) :
                new ObjectParameter("NombreUsuario", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var rolParameter = rol != null ?
                new ObjectParameter("Rol", rol) :
                new ObjectParameter("Rol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateUsuario", usuarioIDParameter, nombreUsuarioParameter, contraseñaParameter, rolParameter);
        }
    }
}
